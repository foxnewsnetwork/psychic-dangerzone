// Generated by CoffeeScript 1.3.3
(function() {
  var About, AboutView, App, Blog, BlogView, Blogs, Contact, ContactView, Game, GameState, Games,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AboutView = (function(_super) {

    __extends(AboutView, _super);

    function AboutView() {
      return AboutView.__super__.constructor.apply(this, arguments);
    }

    AboutView.prototype.tagName = "h1";

    AboutView.prototype.className = "h1-about";

    AboutView.prototype.parent = $("#about");

    AboutView.prototype.initialize = function(model) {
      this.model = model;
    };

    AboutView.prototype.render = function() {
      if (this.model == null) {
        throw "Calling without a model error About";
      }
      $(this.el).appendTo(this.parent);
      return this.hide();
    };

    AboutView.prototype.show = function() {
      $(this.el).html(this.model.get("content"));
      $(this.el).show();
      return this.parent.show();
    };

    AboutView.prototype.hide = function() {
      $(this.el).hide();
      return this.parent.hide();
    };

    return AboutView;

  })(Backbone.View);

  ContactView = (function(_super) {

    __extends(ContactView, _super);

    function ContactView() {
      return ContactView.__super__.constructor.apply(this, arguments);
    }

    ContactView.prototype.tagName = "dl";

    ContactView.prototype.className = "d1-contact";

    ContactView.prototype.parent = $("#contact");

    ContactView.prototype.container = $("#contact-info");

    ContactView.prototype.initialize = function(model) {
      this.model = model;
    };

    ContactView.prototype.render = function() {
      if (this.model == null) {
        throw "Calling without a model error contact";
      }
      this.container.html($(this.el).html(this.model.get("content")));
      return this.hide();
    };

    ContactView.prototype.show = function() {
      $(this.parent).show();
      this.container.html($(this.el).html(this.model.get("content")));
      return $(this.el).show();
    };

    ContactView.prototype.hide = function() {
      $(this.parent).hide();
      return $(this.el).hide();
    };

    return ContactView;

  })(Backbone.View);

  BlogView = (function(_super) {

    __extends(BlogView, _super);

    function BlogView() {
      return BlogView.__super__.constructor.apply(this, arguments);
    }

    return BlogView;

  })(Backbone.View);

  About = (function(_super) {

    __extends(About, _super);

    function About() {
      return About.__super__.constructor.apply(this, arguments);
    }

    About.prototype.defaults = {
      content: null
    };

    About.prototype.url = "pages/about";

    About.prototype.initialize = function() {
      this.view = new AboutView(this);
      this.fetch();
      return this.view.render();
    };

    About.prototype.show = function() {
      return this.view.show();
    };

    About.prototype.hide = function() {
      return this.view.hide();
    };

    return About;

  })(Backbone.Model);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.defaults = {
      title: null,
      content: null,
      image: null
    };

    Game.prototype.initialize = function(title) {
      this.title = title;
      this.url = "games/" + title;
      this.view = new GameView({
        model: this
      });
      this.fetch();
      return this.view.render();
    };

    Game.prototype.show = function() {
      return this.view.show();
    };

    Game.prototype.hide = function() {
      return this.view.hide();
    };

    return Game;

  })(Backbone.Model);

  Blog = (function(_super) {

    __extends(Blog, _super);

    function Blog() {
      return Blog.__super__.constructor.apply(this, arguments);
    }

    Blog.prototype.defaults = {
      title: null,
      content: null
    };

    Blog.prototype.initialize = function(title) {
      this.title = title;
      this.url = "blogs/" + title;
      this.view = new BlogView({
        model: this
      });
      this.fetch();
      return this.view.render();
    };

    Blog.prototype.show = function() {
      return this.view.show();
    };

    Blog.prototype.hide = function() {
      return this.view.hide();
    };

    return Blog;

  })(Backbone.Model);

  GameState = (function(_super) {

    __extends(GameState, _super);

    function GameState() {
      return GameState.__super__.constructor.apply(this, arguments);
    }

    GameState.prototype.keys = ["about", "contact", "games", "blogs"];

    GameState.prototype.defaults = {
      about: new About(),
      contact: new Contact(),
      games: new Games(),
      blogs: new Blogs()
    };

    GameState.prototype.goto = function(name) {
      var args;
      args = Array.prototype.slice.call(arguments);
      switch (name) {
        case "about":
        case "contact":
        case "games":
        case "blogs":
          return this.show(this.hide_all_except(name, args));
        default:
          return this.hide();
      }
    };

    GameState.prototype.show = function(options) {
      var name, params;
      name = options["name"];
      params = options["params"];
      switch (name) {
        case "about":
        case "contact":
        case "games":
        case "blogs":
          return this.get("name").show(params);
      }
    };

    GameState.prototype.hide_all_except = function(name, args) {
      var key, options, _i, _len, _ref;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (key !== name) {
          this.get(key).hide();
        }
      }
      return options = {
        "name": name,
        "params": args
      };
    };

    return GameState;

  })(Backbone.Model);

  Contact = (function(_super) {

    __extends(Contact, _super);

    function Contact() {
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.prototype.defaults = {
      content: null
    };

    Contact.prototype.url = "pages/contact";

    Contact.prototype.initialize = function() {
      this.view = new ContactView(this);
      this.fetch();
      return this.view.render();
    };

    Contact.prototype.show = function() {
      return this.view.show();
    };

    Contact.prototype.hide = function() {
      return this.view.hide();
    };

    return Contact;

  })(Backbone.Model);

  Blogs = (function(_super) {

    __extends(Blogs, _super);

    function Blogs() {
      return Blogs.__super__.constructor.apply(this, arguments);
    }

    Blogs.prototype.url = "blogs";

    Blogs.prototype.model = Blog;

    Blogs.prototype.initialize = function() {
      this.view = new BlogsView({
        model: this
      });
      this.fetch();
      this.view.render();
      return this.title_hash = {};
    };

    Blogs.prototype.show = function(params) {
      var blog, title;
      if (params != null) {
        title = params["title"];
        if (this.has_title(title)) {
          return this.get_at(title).show();
        } else {
          blog = new Blog(title);
          blog.show();
          return this.push_into(blog);
        }
      } else {
        return this.view.show();
      }
    };

    Blogs.prototype.hide = function() {
      this.forEach(function(blog) {
        return blog.hide();
      });
      return this.view.hide();
    };

    Blogs.prototype.push_into = function(blog) {
      this.title_hash[blog.title] = this.length;
      return this.push(blog);
    };

    Blogs.prototype.get_at = function(title) {
      return this.at(this.title_hash[title]);
    };

    Blogs.prototype.has_title = function(title) {
      return this.title_hash[title] != null;
    };

    return Blogs;

  })(Backbone.Collection);

  Games = (function(_super) {

    __extends(Games, _super);

    function Games() {
      return Games.__super__.constructor.apply(this, arguments);
    }

    Games.prototype.url = "games";

    Games.prototype.model = Game;

    Games.prototype.initialize = function() {
      this.view = new GamesView({
        model: this
      });
      this.fetch();
      this.view.render();
      return this.title_hash = {};
    };

    Games.prototype.show = function(params) {
      var game, title;
      if (params != null) {
        title = params["title"];
        if (this.has_title(title)) {
          return this.get_at(title).show();
        } else {
          game = new Game(title);
          game.show();
          return this.push_into(game);
        }
      } else {
        return this.view.show();
      }
    };

    Games.prototype.hide = function() {
      this.forEach(function(game) {
        return game.hide();
      });
      return this.view.hide();
    };

    Games.prototype.push_into = function(game) {
      this.title_hash[game.title] = this.length;
      return this.push(game);
    };

    Games.prototype.get_at = function(title) {
      return this.at(this.title_hash[title]);
    };

    Games.prototype.has_title = function(title) {
      return this.title_hash[title] != null;
    };

    return Games;

  })(Backbone.Collection);

  App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function(gamestate) {
      this.gamestate = gamestate;
    };

    App.prototype.routes = {
      "about": "about",
      "contact": "contact",
      "blog/:title": "blog",
      "games/:title": "games"
    };

    App.prototype.about = function() {
      return this.gamestate.goto("about");
    };

    App.prototype.contact = function() {
      return this.gamestate.goto("contact");
    };

    App.prototype.blog = function(title) {
      return this.gamestate.goto("blog", title);
    };

    App.prototype.games = function(title) {
      return this.gamestate.goto("games", title);
    };

    return App;

  })(Backbone.Routers);

  ({
    PublicStaticVoidMain: function() {
      var app, gamestate, hashname, pathname;
      hashname = window.location.hash;
      pathname = window.location.pathname;
      gamestate = new GameState({
        hash: hashname,
        path: pathname
      });
      return app = new App(gamestate);
    }
  });

  $(PublicStaticVoidMain());

}).call(this);
